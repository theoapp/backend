openapi: "3.0.0"
info:
  description: "Theo node - The Authorized Keys Manager. You can find out more about Theo at [https://github.com/theoapp/](https://github.com/theoapp/)."
  version: "0.12.0"
  title: "Theo"
  contact:
    email: "team@authkeys.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: https://theo.test.authkeys.io
    description: Public UNTRUSTABLE test theo server
tags:
  - name: "utils"
    description: "Utils methods"
  - name: "account"
    description: "Everything about accounts"
  - name: "keys"
    description: "Everything about accounts' public keys"
  - name: "permissions"
    description: "Everything about permissions"
  - name: "groups"
    description: "Everything about groups"
paths:
  /:
    get:
      tags:
        - "utils"
      summary: "Get server status"
      operationId: getStatus
      responses:
        200:
          description: "Server status"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: "integer"
                    format: "int32"
                    example: 200
  /flushdb:
    post:
      tags:
        - "utils"
      summary: "Flush all databases and cache. It's enabled ONLY when server runs in TEST mode"
      operationId: flushDB
      responses:
        204:
          description: "Db flushed"
        403:
          description: "Even if authenticated, the operation is forbidden (server is NOT RUNNING in TEST mode"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
  /tokens:
    post:
      tags:
        - "utils"
      summary: "Replaces admin and clients tokens."
      operationId: replaceTokens
      requestBody:
        description: New tokens
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                admin:
                  type: "string"
                  example: "j5jkl34h523hjlbnsdjgjhq45gh23fh"
                clients:
                  type: "array"
                  items:
                    type: "string"
                    example: "j5jkl34h523hjlbnsdjgjhq45gh23fh"
      responses:
        204:
          description: "Token refreshed"
        400:
          description: "Invalid payload"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPayloadErrorResponse"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenCore: []
  /accounts:
    get:
      tags:
        - "account"
      summary: "Retrieves accounts"
      operationId: listAccounts
      parameters:
        - name: "limit"
          in: "query"
          description: "Number of accounts to retrieve"
          required: false
          schema:
            type: "integer"
            format: "int32"
        - name: "offset"
          in: "query"
          description: "Offset of the list"
          required: false
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "List of accounts"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountsList"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
    post:
      tags:
        - "account"
      summary: "Create new account"
      operationId: addAccount
      security:
        - bearerTokenAdmin: []
      requestBody:
        description: Account to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountNew'
      responses:
        200:
          description: Account response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        400:
          description: "Invalid payload"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPayloadErrorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /accounts/search:
    get:
      tags:
        - "account"
      summary: "Search accounts"
      operationId: searchAccount
      parameters:
        - name: "limit"
          in: "query"
          description: "Number of accounts to retrieve"
          required: false
          schema:
            type: "integer"
            format: "int32"
        - name: "offset"
          in: "query"
          description: "Offset of the list"
          required: false
          schema:
            type: "integer"
            format: "int32"
        - name: "name"
          in: "query"
          description: "Search by name"
          required: false
          schema:
            type: "string"
            example: "mac"
        - name: "email"
          in: "query"
          description: "Search by email"
          required: false
          schema:
            type: "string"
            example: "@authkeys.io"
      responses:
        200:
          description: "List of accounts"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountsList"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
  /accounts/{id}:
    get:
      tags:
        - "account"
      summary: "Get account"
      operationId: getAccount
      parameters:
        - name: "id"
          in: "path"
          description: "Account ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        200:
          description: "Account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        404:
          description: "Account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
    put:
      tags:
        - "account"
      summary: "Edit account"
      operationId: editAccount
      parameters:
        - name: "id"
          in: "path"
          description: "Account ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        description: "Fields to edit"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountEdit'
      responses:
        201:
          description: "Done"
        404:
          description: "Account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
    delete:
      tags:
        - "account"
      summary: "Delete account"
      operationId: deleteAccount
      parameters:
        - name: "id"
          in: "path"
          description: "Account ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        201:
          description: "Done"
        404:
          description: "Account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /accounts/{id}/keys:
    post:
      tags:
        - "account"
        - "keys"
      summary: "Add keys to account"
      operationId: addKeysToAccount
      parameters:
        - name: "id"
          in: "path"
          description: "Account ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        description: "New key(s) to add"
        required: true
        content:
          application/json:
            schema:
              properties:
                keys:
                  type: "array"
                  items:
                    oneOf:
                      - type: "string"
                        example: "ssh-rsa AAA[...]xv macno@laptop"
                      - $ref: "#/components/schemas/PublicKeyNew"
      responses:
        200:
          description: Account response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        400:
          description: "Invalid payload"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPayloadErrorResponse'
        404:
          description: "Account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /accounts/{id}/keys/{key_id}:
    delete:
      tags:
        - "account"
        - "keys"
      summary: "Delete public key from account"
      operationId: deleteKeyFromAccount
      parameters:
        - name: "id"
          in: "path"
          description: "Account ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "key_id"
          in: "path"
          description: "Public Key ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        201:
          description: "Done"
        404:
          description: "Account/Key not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /accounts/{id}/keys/import/{service}:
    post:
      tags:
        - "account"
        - "keys"
      summary: "Add public keys to account loading them from external service"
      operationId: addKeysFromServiceToAccount
      parameters:
        - name: "id"
          in: "path"
          description: "Account ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "service"
          in: "path"
          description: "Service to fetch the keys from"
          required: true
          schema:
            type: "string"
            example: "github"
      requestBody:
        description: "Username to fetch"
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: "string"
                  example: "macno"
      responses:
        200:
          description: Account response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        400:
          description: "Invalid payload"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPayloadErrorResponse'
        404:
          description: "Account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /accounts/{id}/permissions:
    post:
      tags:
        - "account"
        - "permissions"
      summary: "Add permissions to account"
      operationId: addPermissionsToAccount
      parameters:
        - name: "id"
          in: "path"
          description: "Account ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        description: "New permission to add"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionNew'
      responses:
        200:
          description: Account response
          content:
            application/json:
              schema:
                properties:
                  account_id:
                    type: "integer"
                    format: "int64"
                    example: 324
                  permission_id:
                    type: "integer"
                    format: "int64"
                    example: 435
        400:
          description: "Invalid payload"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPayloadErrorResponse'
        404:
          description: "Account not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /accounts/{id}/permissions/{permission_id}:
    delete:
      tags:
        - "account"
        - "permissions"
      summary: "Delete permission from account"
      operationId: deletePermissionFromAccount
      parameters:
        - name: "id"
          in: "path"
          description: "Account ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "permission_id"
          in: "path"
          description: "Permission ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        201:
          description: "Done"
        404:
          description: "Account/Permission not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorResponse'
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /groups:
    get:
      tags:
        - "groups"
      summary: "Retrieves groups"
      operationId: listGroups
      parameters:
        - name: "limit"
          in: "query"
          description: "Number of groups to retrieve"
          required: false
          schema:
            type: "integer"
            format: "int32"
        - name: "offset"
          in: "query"
          description: "Offset of the list"
          required: false
          schema:
            type: "integer"
            format: "int32"
      responses:
        200:
          description: "List of groups"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupsList"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
    post:
      tags:
        - "groups"
      summary: "Create new group"
      operationId: addGroup
      requestBody:
        description: "Group's name to create"
        required: true
        content:
          application/json:
            schema:
              required:
                - "name"
              properties:
                name:
                  type: "string"
                  example: "Developers"
      responses:
        200:
          description: "Group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
  /groups/{id}:
    get:
      tags:
        - "groups"
      summary: "Retrieve a group"
      operationId: getGroup
      parameters:
        - name: "id"
          in: "path"
          description: "Group ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
          example: 765
      responses:
        200:
          description: "Group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
    post:
      tags:
        - "groups"
      summary: "DEPRECATED: Use /groups/{id}/account(s). Add account(s) to a group"
      operationId: deprecatedAddAccountsToGroup
      parameters:
        - name: "id"
          in: "path"
          description: "Group ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
          example: 765
      requestBody:
        description: "Account(s) to add to the group"
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/AccountId"
                - $ref: "#/components/schemas/AccountIds"
      responses:
        200:
          description: "Group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        400:
          description: "Invalid payload"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPayloadErrorResponse"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
  /groups/{id}/account:
    post:
      tags:
        - "groups"
      summary: "Add account to a group"
      operationId: addAccountToGroup
      parameters:
        - name: "id"
          in: "path"
          description: "Group ID"
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        description: "Account to add to the group"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountId"
      responses:
        204:
          description: "Account added to a group"
        400:
          description: "Invalid payload"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPayloadErrorResponse"
        404:
          description: "Entity not found (group or account)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorResponse"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
  /groups/{id}/accounts:
    post:
      tags:
        - "groups"
      summary: "Add accounts to a group"
      operationId: addAccountsToGroup
      parameters:
        - name: "id"
          in: "path"
          description: "Group ID"
          required: true
          schema:
            type: "integer"
            format: "int64"
          example: 765
      requestBody:
        description: "Accounts to add to a group"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountIds"
      responses:
        200:
          description: "List of results"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  required:
                    - "status"
                    - "account"
                  properties:
                    status:
                      type: "integer"
                      format: "int32"
                      example: 400
                    account:
                      oneOf:
                        - $ref: '#/components/schemas/Id'
                        - type: "string"
                          example: "macno@authkeys.io"
                    reason:
                      nullable: true
                      type: "string"
                      example: "Account not found"
        400:
          description: "Invalid payload"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPayloadErrorResponse"
        404:
          description: "Group not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundErrorResponse"
        default:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerTokenAdmin: []
components:
  securitySchemes:
    bearerTokenCore:
      type: http
      scheme: bearer
    bearerTokenAdmin:
      type: http
      scheme: bearer
    bearerTokenClient:
      type: http
      scheme: bearer
  schemas:
    BasicList:
      type: "object"
      required:
        - "total"
        - "limit"
        - "offset"
        - "rows"
      properties:
        total:
          type: "integer"
          format: "int32"
        limit:
          type: "integer"
          format: "int32"
        offset:
          type: "integer"
          format: "int32"
        rows:
          type: "array"
          items:
            type: "string"
    AccountId:
      type: "object"
      required:
        - "id"
      properties:
        id:
          $ref: '#/components/schemas/Id'
    AccountIds:
      type: "object"
      required:
        - "ids"
      properties:
        ids:
          $ref: '#/components/schemas/Ids'
    AccountNew:
      type: "object"
      required:
        - "name"
        - "email"
      properties:
        name:
          type: "string"
          example: "Michele"
        email:
          type: "string"
          example: "macno@authkeys.io"
        expire_at:
          $ref: '#/components/schemas/ExpireAt'
        keys:
          type: "array"
          items:
            oneOf:
              - type: "string"
                example: "ssh-rsa AAA[...]xv macno@laptop"
              - $ref: "#/components/schemas/PublicKeyNew"
    AccountEdit:
      type: "object"
      properties:
        expire_at:
          type: "integer"
          format: "int64"
          nullable: true
        active:
          $ref: "#/components/schemas/Active"
    AccountMinimal:
      type: "object"
      required:
        - "id"
        - "name"
        - "email"
        - "active"
        - "expire_at"
        - "created_at"
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: "string"
          example: "Michele"
        email:
          type: "string"
          example: "macno@authkeys.io"
        active:
          $ref: "#/components/schemas/Active"
        expire_at:
          $ref: "#/components/schemas/ExpireAt"
        created_at:
          $ref: "#/components/schemas/CreatedAt"
    Account:
      allOf:
        - $ref: '#/components/schemas/AccountMinimal'
        - type: "object"
          required:
            - "expire_at"
            - "public_keys"
            - "groups"
            - "permissions"
          properties:
            expire_at:
              $ref: '#/components/schemas/ExpireAt'
            public_keys:
              type: "array"
              items:
                $ref: '#/components/schemas/PublicKey'
            groups:
              type: "array"
              items:
                $ref: '#/components/schemas/GroupMinimal'
            permissions:
              items:
                $ref: '#/components/schemas/Permission'
    AccountsList:
      allOf:
        - $ref: '#/components/schemas/BasicList'
        - type: "object"
          properties:
            rows:
              type: "array"
              items:
                $ref: "#/components/schemas/AccountMinimal"
    GroupMinimal:
      type: "object"
      required:
        - "id"
        - "name"
        - "active"
        - "created_at"
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: "string"
          example: "Developers"
        active:
          $ref: '#/components/schemas/Active'
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    Group:
      allOf:
        - $ref: '#/components/schemas/GroupMinimal'
        - type: "object"
          required:
            - "accounts"
            - "permissions"
          properties:
            accounts:
              type: "array"
              items:
                $ref: '#/components/schemas/AccountMinimal'
            permissions:
              type: "array"
              items:
                $ref: '#/components/schemas/Permission'
    GroupsList:
      allOf:
        - $ref: '#/components/schemas/BasicList'
        - type: "object"
          properties:
            rows:
              type: "array"
              items:
                $ref: "#/components/schemas/GroupMinimal"
    PublicKeyNew:
      type: "object"
      required:
        - "key"
      properties:
        key:
          type: "string"
          example: "ssh-rsa AAA[...]xv macno@laptop"
        signature:
          type: "string"
          example: "XgRI6y3[...]S0ZFHN"
          nullable: true
    PublicKey:
      type: "object"
      required:
        - "id"
        - "public_key"
        - "public_key_sig"
        - "created_at"
      properties:
        id:
          $ref: '#/components/schemas/Id'
        public_key:
          type: "string"
          example: "ssh-rsa AAA[...]xv macno@laptop"
        public_key_sig:
          type: "string"
          example: "XgRI6y3[...]S0ZFHN"
          nullable: true
        created_at:
          $ref: '#/components/schemas/CreatedAt'
    Active:
      type: "integer"
      format: "int32"
      example: 1
      minimum: 0
      maximum: 1
    AccountResponse:
      type: "object"
      required:
        - "account_id"
        - "public_keys"
      properties:
        account_id:
          $ref: '#/components/schemas/Id'
        public_keys:
          type: "array"
          items:
            $ref: "#/components/schemas/PublicKey"
    PermissionNew:
      type: "object"
      required:
        - "user"
        - "host"
      properties:
        user:
          type: "string"
          example: "root"
        host:
          type: "string"
          example: "server1"
    Permission:
      allOf:
        - $ref: '#/components/schemas/PermissionNew'
        - type: "object"
          required:
            - "id"
            - "created_at"
          properties:
            id:
              $ref: '#/components/schemas/Id'
            created_at:
              $ref: '#/components/schemas/CreatedAt'
    Id:
      oneOf:
        - type: "integer"
          format: "int64"
          example: 251
        - type: "string"
          example: "unique email/code"
    Ids:
      type: "array"
      items:
        $ref: '#/components/schemas/Id'
    ExpireAt:
      type: "integer"
      format: "int64"
      example: 0
    CreatedAt:
      type: "integer"
      format: "int64"
      example: 1539688358693
    ErrorResponse:
      type: "object"
      required:
        - "status"
        - "reason"
      properties:
        status:
          type: "integer"
          format: "int32"
          example: 500
        reason:
          type: "string"
          example: "Internal Server Error"
    NotFoundErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: "object"
          properties:
            status:
              example: 404
            reason:
              example: "Item not found"
    InvalidPayloadErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: "object"
          properties:
            status:
              example: 400
            reason:
              example: "Invalid payload"
    ForbiddenErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: "object"
          properties:
            status:
              example: 403
            reason:
              example: "Operation is forbidden"
externalDocs:
  description: "Find out more about Theo"
  url: "https://github.com/theoapp/"
